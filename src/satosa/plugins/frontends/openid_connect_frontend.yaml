module: oidc2fer.frontends.jwt_userinfo_openid_connect.JWTUserInfoOpenIDConnectFrontend
name: OIDC
config:
  signing_key_path: /tmp/frontend.key
  signing_key_id: frontend.key1

  # Defines the database connection URI for the databases:
  # - authz_code_db
  # - access_token_db
  # - refresh_token_db
  # - sub_db
  # - user_db
  #
  # supported storage backends:
  # - In-memory dictionary
  # - MongoDB (e.g. mongodb://db.example.com)
  # - Redis (e.g. redis://example/0)
  # - Stateless (eg. stateless://user:encryptionkey?alg=aes256)
  #
  # This configuration is optional.
  # By default, the in-memory storage is used.
  db_uri: !ENV OIDC_DB_URI

  # Where to store clients.
  #
  # If client_db_uri is set, the database connection is used.
  # Otherwise, if client_db_path is set, the JSON file is used.
  # By default, an in-memory dictionary is used.
  # client_db_uri: mongodb://db.example.com
  client_db_path: /tmp/client_db.json

  # if not specified, it is randomly generated on every startup
  sub_hash_salt: randomSALTvalue
  sub_mirror_public: yes

  provider:
    client_registration_supported: no
    response_types_supported: ["code", "id_token token"]
    subject_types_supported: ["public"]
    scopes_supported:
      - openid
      - email
      - uid
      - given_name
      - usual_name
      - siret

    # Set code/token lifetimes as short as possible
    authorization_code_lifetime: 60
    access_token_lifetime: 60
    id_token_lifetime: 60

    extra_scopes:
      uid:
      - uid
      given_name:
      - given_name
      usual_name:
      - usual_name
      siret:
      - siret
